// Package GraphV0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package GraphV0

import (
	"time"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BaseItem defines model for baseItem.
type BaseItem struct {
	// Embedded struct due to allOf(#/components/schemas/entity)
	Entity `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	CreatedBy     *IdentitySet `json:"createdBy,omitempty"`
	CreatedByUser *User        `json:"createdByUser,omitempty"`

	// Date and time of item creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Provides a user-visible description of the item. Optional.
	Description *string `json:"description,omitempty"`

	// ETag for the item. Read-only.
	ETag               *string      `json:"eTag,omitempty"`
	LastModifiedBy     *IdentitySet `json:"lastModifiedBy,omitempty"`
	LastModifiedByUser *User        `json:"lastModifiedByUser,omitempty"`

	// Date and time the item was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// The name of the item. Read-write.
	Name            *string        `json:"name,omitempty"`
	ParentReference *ItemReference `json:"parentReference,omitempty"`

	// URL that displays the resource in the browser. Read-only.
	WebUrl *string `json:"webUrl,omitempty"`
}

// Deleted defines model for deleted.
type Deleted struct {

	// Represents the state of the deleted item.
	State *string `json:"state,omitempty"`
}

// DirectoryObject defines model for directoryObject.
type DirectoryObject struct {
	// Embedded struct due to allOf(#/components/schemas/entity)
	Entity `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	DeletedDateTime *time.Time `json:"deletedDateTime,omitempty"`
}

// Drive defines model for drive.
type Drive struct {
	// Embedded struct due to allOf(#/components/schemas/baseItem)
	BaseItem `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Describes the type of drive represented by this resource. Values are "personal" for users home spaces, "projectSpace" or "shares". Read-only.
	DriveType *string `json:"driveType,omitempty"`

	// All items contained in the drive. Read-only. Nullable.
	Items     *[]DriveItem `json:"items,omitempty"`
	OCCoOwner *IdentitySet `json:"oCCoOwner,omitempty"`

	// Describes the status of the drive.
	OCDriveStatus *string      `json:"oCDriveStatus,omitempty"`
	Owner         *IdentitySet `json:"owner,omitempty"`
	Quota         *Quota       `json:"quota,omitempty"`
	Root          *DriveItem   `json:"root,omitempty"`
}

// DriveItem defines model for driveItem.
type DriveItem struct {
	// Embedded struct due to allOf(#/components/schemas/baseItem)
	BaseItem `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// An eTag for the content of the item. This eTag is not changed if only the metadata is changed. Note This property is not returned if the item is a folder. Read-only.
	CTag *string `json:"cTag,omitempty"`

	// Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.
	Children *[]DriveItem `json:"children,omitempty"`

	// The content stream, if the item represents a file.
	Content        *string         `json:"content,omitempty"`
	Deleted        *Deleted        `json:"deleted,omitempty"`
	File           *File           `json:"file,omitempty"`
	FileSystemInfo *FileSystemInfo `json:"fileSystemInfo,omitempty"`
	Folder         *Folder         `json:"folder,omitempty"`
	Image          *Image          `json:"image,omitempty"`
	Root           *Root           `json:"root,omitempty"`

	// Size of the item in bytes. Read-only.
	Size *int64 `json:"size,omitempty"`

	// WebDAV compatible URL for the item. Read-only.
	WebDavUrl *string `json:"webDavUrl,omitempty"`
}

// Entity defines model for entity.
type Entity struct {

	// Read-only.
	Id *string `json:"id,omitempty"`
}

// File defines model for file.
type File struct {
	Hashes *Hashes `json:"hashes,omitempty"`

	// The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only.
	MimeType           *string `json:"mimeType,omitempty"`
	ProcessingMetadata *bool   `json:"processingMetadata,omitempty"`
}

// FileSystemInfo defines model for fileSystemInfo.
type FileSystemInfo struct {

	// The UTC date and time the file was created on a client.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// The UTC date and time the file was last accessed. Available for the recent file list only.
	LastAccessedDateTime *time.Time `json:"lastAccessedDateTime,omitempty"`

	// The UTC date and time the file was last modified on a client.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
}

// Folder defines model for folder.
type Folder struct {

	// Number of children contained immediately within this container.
	ChildCount *int32      `json:"childCount,omitempty"`
	View       *FolderView `json:"view,omitempty"`
}

// FolderView defines model for folderView.
type FolderView struct {

	// The method by which the folder should be sorted.
	SortBy *string `json:"sortBy,omitempty"`

	// If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending.
	SortOrder *string `json:"sortOrder,omitempty"`

	// The type of view that should be used to represent the folder.
	ViewType *string `json:"viewType,omitempty"`
}

// Hashes defines model for hashes.
type Hashes struct {

	// The CRC32 value of the file (if available). Read-only.
	Crc32Hash *string `json:"crc32Hash,omitempty"`

	// A proprietary hash of the file that can be used to determine if the contents of the file have changed (if available). Read-only.
	QuickXorHash *string `json:"quickXorHash,omitempty"`

	// SHA1 hash for the contents of the file (if available). Read-only.
	Sha1Hash *string `json:"sha1Hash,omitempty"`

	// SHA256 hash for the contents of the file (if available). Read-only.
	Sha256Hash *string `json:"sha256Hash,omitempty"`
}

// Identity defines model for identity.
type Identity struct {

	// The identity's display name. Note that this may not always be available or up to date. For example, if a user changes their display name, the API may show the new value in a future response, but the items associated with the user won't show up as having changed when using delta.
	DisplayName *string `json:"displayName,omitempty"`

	// Unique identifier for the identity.
	Id *string `json:"id,omitempty"`
}

// IdentitySet defines model for identitySet.
type IdentitySet struct {
	Application *Identity `json:"application,omitempty"`
	Device      *Identity `json:"device,omitempty"`
	User        *Identity `json:"user,omitempty"`
}

// Image defines model for image.
type Image struct {

	// Optional. Height of the image, in pixels. Read-only.
	Height *int32 `json:"height,omitempty"`

	// Optional. Width of the image, in pixels. Read-only.
	Width *int32 `json:"width,omitempty"`
}

// ItemReference defines model for itemReference.
type ItemReference struct {

	// Unique identifier of the drive instance that contains the item. Read-only.
	DriveId *string `json:"driveId,omitempty"`

	// Identifies the type of drive. See [drive][] resource for values. Read-only.
	DriveType *string `json:"driveType,omitempty"`

	// Unique identifier of the item in the drive. Read-only.
	Id *string `json:"id,omitempty"`

	// The name of the item being referenced. Read-only.
	Name *string `json:"name,omitempty"`

	// Path that can be used to navigate to the item. Read-only.
	Path *string `json:"path,omitempty"`

	// A unique identifier for a shared resource that can be accessed via the [Shares][] API.
	ShareId *string `json:"shareId,omitempty"`
}

// OdataError defines model for odata.error.
type OdataError struct {
	Error OdataErrorMain `json:"error"`
}

// OdataErrorDetail defines model for odata.error.detail.
type OdataErrorDetail struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Target  *string `json:"target,omitempty"`
}

// OdataErrorMain defines model for odata.error.main.
type OdataErrorMain struct {
	Code    string              `json:"code"`
	Details *[]OdataErrorDetail `json:"details,omitempty"`

	// The structure of this object is service-specific
	Innererror *map[string]interface{} `json:"innererror,omitempty"`
	Message    string                  `json:"message"`
	Target     *string                 `json:"target,omitempty"`
}

// Quota defines model for quota.
type Quota struct {

	// Total space consumed by files in the recycle bin, in bytes. Read-only.
	Deleted *int64 `json:"deleted,omitempty"`

	// Total space remaining before reaching the quota limit, in bytes. Read-only.
	Remaining *int64 `json:"remaining,omitempty"`

	// Enumeration value that indicates the state of the storage space. Read-only.
	State                  *string                 `json:"state,omitempty"`
	StoragePlanInformation *StoragePlanInformation `json:"storagePlanInformation,omitempty"`

	// Total allowed storage space, in bytes. Read-only.
	Total *int64 `json:"total,omitempty"`

	// Total space used, in bytes. Read-only.
	Used *int64 `json:"used,omitempty"`
}

// Root defines model for root.
type Root map[string]interface{}

// StoragePlanInformation defines model for storagePlanInformation.
type StoragePlanInformation struct {

	// Indicates if there are higher storage quota plans available. Read-only.
	UpgradeAvailable *bool `json:"upgradeAvailable,omitempty"`
}

// User defines model for user.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/directoryObject)
	DirectoryObject `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A freeform text entry field for the user to describe themselves. Returned only on $select.
	AboutMe *string `json:"aboutMe,omitempty"`

	// true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter.
	AccountEnabled *bool `json:"accountEnabled,omitempty"`

	// The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Returned only on $select.
	Birthday *time.Time `json:"birthday,omitempty"`

	// The telephone numbers for the user. Only one number can be set for this property. Returned by default. Read-only for users synced from on-premises directory.
	BusinessPhones *[]string `json:"businessPhones,omitempty"`

	// The city in which the user is located. Returned only on $select. Supports $filter.
	City *string `json:"city,omitempty"`

	// The company name which the user is associated. This property can be useful for describing the company that an external user comes from. The maximum length of the company name is 64 characters.Returned only on $select.
	CompanyName *string `json:"companyName,omitempty"`

	// The country/region in which the user is located; for example, 'US' or 'UK'. Returned only on $select. Supports $filter.
	Country *string `json:"country,omitempty"`

	// The date and time the user was created. The value cannot be modified and is automatically populated when the entity is created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. Property is nullable. A null value indicates that an accurate creation time couldn't be determined for the user. Returned only on $select. Read-only. Supports $filter.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// The name for the department in which the user works. Returned only on $select. Supports $filter.
	Department *string `json:"department,omitempty"`

	// The name displayed in the address book for the user. This value is usually the combination of the user's first name, middle initial, and last name. This property is required when a user is created and it cannot be cleared during updates. Returned by default. Supports $filter and $orderby.
	DisplayName *string `json:"displayName,omitempty"`
	Drive       *Drive  `json:"drive,omitempty"`

	// A collection of drives available for this user. Read-only.
	Drives *[]Drive `json:"drives,omitempty"`

	// The fax number of the user. Returned only on $select.
	FaxNumber *string `json:"faxNumber,omitempty"`

	// The given name (first name) of the user. Returned by default. Supports $filter.
	GivenName *string `json:"givenName,omitempty"`

	// The time when this user last changed their password. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Returned only on $select. Read-only.
	LastPasswordChangeDateTime *time.Time `json:"lastPasswordChangeDateTime,omitempty"`

	// Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, minorWithOutParentalConsent, minorWithParentalConsent, minorNoParentalConsentRequired, notAdult and adult. Refer to the legal age group property definitions for further information. Returned only on $select.
	LegalAgeGroupClassification *string `json:"legalAgeGroupClassification,omitempty"`

	// The SMTP address for the user, for example, 'jeff@contoso.onowncloud.com'. Returned by default. Supports $filter and endsWith.
	Mail *string `json:"mail,omitempty"`

	// The mail alias for the user. This property must be specified when a user is created. Returned only on $select. Supports $filter.
	MailNickname *string `json:"mailNickname,omitempty"`

	// The primary cellular telephone number for the user. Returned by default. Read-only for users synced from on-premises directory.
	MobilePhone *string `json:"mobilePhone,omitempty"`

	// The office location in the user's place of business. Returned by default.
	OfficeLocation *string `json:"officeLocation,omitempty"`

	// The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code. Returned only on $select.
	PostalCode *string `json:"postalCode,omitempty"`

	// The preferred language for the user. Should follow ISO 639-1 Code; for example 'en-US'. Returned by default.
	PreferredLanguage *string `json:"preferredLanguage,omitempty"`

	// The state or province in the user's address. Returned only on $select. Supports $filter.
	State *string `json:"state,omitempty"`

	// The street address of the user's place of business. Returned only on $select.
	StreetAddress *string `json:"streetAddress,omitempty"`

	// The user's surname (family name or last name). Returned by default. Supports $filter.
	Surname *string `json:"surname,omitempty"`

	// A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries.  Examples include: 'US', 'JP', and 'GB'. Not nullable. Returned only on $select. Supports $filter.
	UsageLocation *string `json:"usageLocation,omitempty"`

	// The user principal name (UPN) of the user. The UPN is an Internet-style login name for the user based on the Internet standard RFC 822. By convention, this should map to the user's email name. The general format is alias@domain, where domain must be present in the tenant's collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization. Returned by default. Supports $filter, $orderby, and endsWith.
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`

	// A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'. Returned only on $select. Supports $filter.
	UserType *string `json:"userType,omitempty"`
}

// Count defines model for count.
type Count bool

// Filter defines model for filter.
type Filter string

// Search defines model for search.
type Search string

// Skip defines model for skip.
type Skip int

// Top defines model for top.
type Top int

// Error defines model for error.
type Error OdataError

// MeDriveRootDeleteRootParams defines parameters for MeDriveRootDeleteRoot.
type MeDriveRootDeleteRootParams struct {

	// ETag
	IfMatch *string `json:"If-Match,omitempty"`
}

// MeDriveRootGetRootParams defines parameters for MeDriveRootGetRoot.
type MeDriveRootGetRootParams struct {

	// Select properties to be returned
	Select *[]MeDriveRootGetRootParamsSelect `json:"$select,omitempty"`
}

// MeDriveRootGetRootParamsSelect defines parameters for MeDriveRootGetRoot.
type MeDriveRootGetRootParamsSelect string

// MeDriveRootUpdateRootJSONBody defines parameters for MeDriveRootUpdateRoot.
type MeDriveRootUpdateRootJSONBody DriveItem

// MeListDrivesParams defines parameters for MeListDrives.
type MeListDrivesParams struct {

	// Show only the first n items
	Top *Top `json:"$top,omitempty"`

	// Skip the first n items
	Skip *Skip `json:"$skip,omitempty"`

	// Search items by search phrases
	Search *Search `json:"$search,omitempty"`

	// Filter items by property values
	Filter *Filter `json:"$filter,omitempty"`

	// Include count of items
	Count *Count `json:"$count,omitempty"`

	// Select properties to be returned
	Select *[]MeListDrivesParamsSelect `json:"$select,omitempty"`

	// Expand related entities
	Expand *[]MeListDrivesParamsExpand `json:"$expand,omitempty"`
}

// MeListDrivesParamsSelect defines parameters for MeListDrives.
type MeListDrivesParamsSelect string

// MeListDrivesParamsExpand defines parameters for MeListDrives.
type MeListDrivesParamsExpand string

// MeCreateDrivesJSONBody defines parameters for MeCreateDrives.
type MeCreateDrivesJSONBody Drive

// MeDrivesDeleteDriveParams defines parameters for MeDrivesDeleteDrive.
type MeDrivesDeleteDriveParams struct {

	// ETag
	IfMatch *string `json:"If-Match,omitempty"`
}

// MeDrivesGetDriveParams defines parameters for MeDrivesGetDrive.
type MeDrivesGetDriveParams struct {

	// Select properties to be returned
	Select *[]MeDrivesGetDriveParamsSelect `json:"$select,omitempty"`

	// Expand related entities
	Expand *[]MeDrivesGetDriveParamsExpand `json:"$expand,omitempty"`
}

// MeDrivesGetDriveParamsSelect defines parameters for MeDrivesGetDrive.
type MeDrivesGetDriveParamsSelect string

// MeDrivesGetDriveParamsExpand defines parameters for MeDrivesGetDrive.
type MeDrivesGetDriveParamsExpand string

// MeDrivesUpdateDriveJSONBody defines parameters for MeDrivesUpdateDrive.
type MeDrivesUpdateDriveJSONBody Drive

// MeDriveRootUpdateRootJSONRequestBody defines body for MeDriveRootUpdateRoot for application/json ContentType.
type MeDriveRootUpdateRootJSONRequestBody MeDriveRootUpdateRootJSONBody

// MeCreateDrivesJSONRequestBody defines body for MeCreateDrives for application/json ContentType.
type MeCreateDrivesJSONRequestBody MeCreateDrivesJSONBody

// MeDrivesUpdateDriveJSONRequestBody defines body for MeDrivesUpdateDrive for application/json ContentType.
type MeDrivesUpdateDriveJSONRequestBody MeDrivesUpdateDriveJSONBody
