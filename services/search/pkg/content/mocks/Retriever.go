// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	providerv1beta1 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
)

// Retriever is an autogenerated mock type for the Retriever type
type Retriever struct {
	mock.Mock
}

// Retrieve provides a mock function with given fields: ctx, rid
func (_m *Retriever) Retrieve(ctx context.Context, rid *providerv1beta1.ResourceId) (io.ReadCloser, error) {
	ret := _m.Called(ctx, rid)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, *providerv1beta1.ResourceId) io.ReadCloser); ok {
		r0 = rf(ctx, rid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *providerv1beta1.ResourceId) error); ok {
		r1 = rf(ctx, rid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRetriever interface {
	mock.TestingT
	Cleanup(func())
}

// NewRetriever creates a new instance of Retriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRetriever(t mockConstructorTestingTNewRetriever) *Retriever {
	mock := &Retriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
