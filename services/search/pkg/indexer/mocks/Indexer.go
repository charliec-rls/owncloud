// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	providerv1beta1 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"

	userv1beta1 "github.com/cs3org/go-cs3apis/cs3/identity/user/v1beta1"
)

// Indexer is an autogenerated mock type for the Indexer type
type Indexer struct {
	mock.Mock
}

// IndexSpace provides a mock function with given fields: ctx, spaceID, userID
func (_m *Indexer) IndexSpace(ctx context.Context, spaceID *providerv1beta1.StorageSpaceId, userID *userv1beta1.UserId) error {
	ret := _m.Called(ctx, spaceID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *providerv1beta1.StorageSpaceId, *userv1beta1.UserId) error); ok {
		r0 = rf(ctx, spaceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIndexer interface {
	mock.TestingT
	Cleanup(func())
}

// NewIndexer creates a new instance of Indexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIndexer(t mockConstructorTestingTNewIndexer) *Indexer {
	mock := &Indexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
