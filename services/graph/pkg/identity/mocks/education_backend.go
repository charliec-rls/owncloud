// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	libregraph "github.com/owncloud/libre-graph-api-go"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// EducationBackend is an autogenerated mock type for the EducationBackend type
type EducationBackend struct {
	mock.Mock
}

// AddUsersToEducationSchool provides a mock function with given fields: ctx, schoolID, memberID
func (_m *EducationBackend) AddUsersToEducationSchool(ctx context.Context, schoolID string, memberID []string) error {
	ret := _m.Called(ctx, schoolID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, schoolID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEducationClass provides a mock function with given fields: ctx, class
func (_m *EducationBackend) CreateEducationClass(ctx context.Context, class libregraph.EducationClass) (*libregraph.EducationClass, error) {
	ret := _m.Called(ctx, class)

	var r0 *libregraph.EducationClass
	if rf, ok := ret.Get(0).(func(context.Context, libregraph.EducationClass) *libregraph.EducationClass); ok {
		r0 = rf(ctx, class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationClass)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, libregraph.EducationClass) error); ok {
		r1 = rf(ctx, class)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEducationSchool provides a mock function with given fields: ctx, group
func (_m *EducationBackend) CreateEducationSchool(ctx context.Context, group libregraph.EducationSchool) (*libregraph.EducationSchool, error) {
	ret := _m.Called(ctx, group)

	var r0 *libregraph.EducationSchool
	if rf, ok := ret.Get(0).(func(context.Context, libregraph.EducationSchool) *libregraph.EducationSchool); ok {
		r0 = rf(ctx, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationSchool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, libregraph.EducationSchool) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEducationUser provides a mock function with given fields: ctx, user
func (_m *EducationBackend) CreateEducationUser(ctx context.Context, user libregraph.EducationUser) (*libregraph.EducationUser, error) {
	ret := _m.Called(ctx, user)

	var r0 *libregraph.EducationUser
	if rf, ok := ret.Get(0).(func(context.Context, libregraph.EducationUser) *libregraph.EducationUser); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, libregraph.EducationUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEducationClass provides a mock function with given fields: ctx, nameOrID
func (_m *EducationBackend) DeleteEducationClass(ctx context.Context, nameOrID string) error {
	ret := _m.Called(ctx, nameOrID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nameOrID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEducationSchool provides a mock function with given fields: ctx, id
func (_m *EducationBackend) DeleteEducationSchool(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEducationUser provides a mock function with given fields: ctx, nameOrID
func (_m *EducationBackend) DeleteEducationUser(ctx context.Context, nameOrID string) error {
	ret := _m.Called(ctx, nameOrID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nameOrID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEducationClass provides a mock function with given fields: ctx, namedOrID, queryParam
func (_m *EducationBackend) GetEducationClass(ctx context.Context, namedOrID string, queryParam url.Values) (*libregraph.EducationClass, error) {
	ret := _m.Called(ctx, namedOrID, queryParam)

	var r0 *libregraph.EducationClass
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values) *libregraph.EducationClass); ok {
		r0 = rf(ctx, namedOrID, queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationClass)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, url.Values) error); ok {
		r1 = rf(ctx, namedOrID, queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEducationClassMembers provides a mock function with given fields: ctx, nameOrID
func (_m *EducationBackend) GetEducationClassMembers(ctx context.Context, nameOrID string) ([]*libregraph.EducationUser, error) {
	ret := _m.Called(ctx, nameOrID)

	var r0 []*libregraph.EducationUser
	if rf, ok := ret.Get(0).(func(context.Context, string) []*libregraph.EducationUser); ok {
		r0 = rf(ctx, nameOrID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*libregraph.EducationUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nameOrID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEducationClasses provides a mock function with given fields: ctx, queryParam
func (_m *EducationBackend) GetEducationClasses(ctx context.Context, queryParam url.Values) ([]*libregraph.EducationClass, error) {
	ret := _m.Called(ctx, queryParam)

	var r0 []*libregraph.EducationClass
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) []*libregraph.EducationClass); ok {
		r0 = rf(ctx, queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*libregraph.EducationClass)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, url.Values) error); ok {
		r1 = rf(ctx, queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEducationSchool provides a mock function with given fields: ctx, nameOrID, queryParam
func (_m *EducationBackend) GetEducationSchool(ctx context.Context, nameOrID string, queryParam url.Values) (*libregraph.EducationSchool, error) {
	ret := _m.Called(ctx, nameOrID, queryParam)

	var r0 *libregraph.EducationSchool
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values) *libregraph.EducationSchool); ok {
		r0 = rf(ctx, nameOrID, queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationSchool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, url.Values) error); ok {
		r1 = rf(ctx, nameOrID, queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEducationSchoolUsers provides a mock function with given fields: ctx, id
func (_m *EducationBackend) GetEducationSchoolUsers(ctx context.Context, id string) ([]*libregraph.EducationUser, error) {
	ret := _m.Called(ctx, id)

	var r0 []*libregraph.EducationUser
	if rf, ok := ret.Get(0).(func(context.Context, string) []*libregraph.EducationUser); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*libregraph.EducationUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEducationSchools provides a mock function with given fields: ctx, queryParam
func (_m *EducationBackend) GetEducationSchools(ctx context.Context, queryParam url.Values) ([]*libregraph.EducationSchool, error) {
	ret := _m.Called(ctx, queryParam)

	var r0 []*libregraph.EducationSchool
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) []*libregraph.EducationSchool); ok {
		r0 = rf(ctx, queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*libregraph.EducationSchool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, url.Values) error); ok {
		r1 = rf(ctx, queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEducationUser provides a mock function with given fields: ctx, nameOrID, queryParam
func (_m *EducationBackend) GetEducationUser(ctx context.Context, nameOrID string, queryParam url.Values) (*libregraph.EducationUser, error) {
	ret := _m.Called(ctx, nameOrID, queryParam)

	var r0 *libregraph.EducationUser
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values) *libregraph.EducationUser); ok {
		r0 = rf(ctx, nameOrID, queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, url.Values) error); ok {
		r1 = rf(ctx, nameOrID, queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEducationUsers provides a mock function with given fields: ctx, queryParam
func (_m *EducationBackend) GetEducationUsers(ctx context.Context, queryParam url.Values) ([]*libregraph.EducationUser, error) {
	ret := _m.Called(ctx, queryParam)

	var r0 []*libregraph.EducationUser
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) []*libregraph.EducationUser); ok {
		r0 = rf(ctx, queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*libregraph.EducationUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, url.Values) error); ok {
		r1 = rf(ctx, queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserFromEducationSchool provides a mock function with given fields: ctx, schoolID, memberID
func (_m *EducationBackend) RemoveUserFromEducationSchool(ctx context.Context, schoolID string, memberID string) error {
	ret := _m.Called(ctx, schoolID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, schoolID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEducationClass provides a mock function with given fields: ctx, id, class
func (_m *EducationBackend) UpdateEducationClass(ctx context.Context, id string, class libregraph.EducationClass) (*libregraph.EducationClass, error) {
	ret := _m.Called(ctx, id, class)

	var r0 *libregraph.EducationClass
	if rf, ok := ret.Get(0).(func(context.Context, string, libregraph.EducationClass) *libregraph.EducationClass); ok {
		r0 = rf(ctx, id, class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationClass)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, libregraph.EducationClass) error); ok {
		r1 = rf(ctx, id, class)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEducationSchool provides a mock function with given fields: ctx, numberOrID, school
func (_m *EducationBackend) UpdateEducationSchool(ctx context.Context, numberOrID string, school libregraph.EducationSchool) (*libregraph.EducationSchool, error) {
	ret := _m.Called(ctx, numberOrID, school)

	var r0 *libregraph.EducationSchool
	if rf, ok := ret.Get(0).(func(context.Context, string, libregraph.EducationSchool) *libregraph.EducationSchool); ok {
		r0 = rf(ctx, numberOrID, school)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationSchool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, libregraph.EducationSchool) error); ok {
		r1 = rf(ctx, numberOrID, school)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEducationUser provides a mock function with given fields: ctx, nameOrID, user
func (_m *EducationBackend) UpdateEducationUser(ctx context.Context, nameOrID string, user libregraph.EducationUser) (*libregraph.EducationUser, error) {
	ret := _m.Called(ctx, nameOrID, user)

	var r0 *libregraph.EducationUser
	if rf, ok := ret.Get(0).(func(context.Context, string, libregraph.EducationUser) *libregraph.EducationUser); ok {
		r0 = rf(ctx, nameOrID, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, libregraph.EducationUser) error); ok {
		r1 = rf(ctx, nameOrID, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEducationBackend interface {
	mock.TestingT
	Cleanup(func())
}

// NewEducationBackend creates a new instance of EducationBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEducationBackend(t mockConstructorTestingTNewEducationBackend) *EducationBackend {
	mock := &EducationBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
