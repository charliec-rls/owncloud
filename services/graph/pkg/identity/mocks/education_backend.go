// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	libregraph "github.com/owncloud/libre-graph-api-go"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// EducationBackend is an autogenerated mock type for the EducationBackend type
type EducationBackend struct {
	mock.Mock
}

// AddMembersToSchool provides a mock function with given fields: ctx, schoolID, memberID
func (_m *EducationBackend) AddMembersToSchool(ctx context.Context, schoolID string, memberID []string) error {
	ret := _m.Called(ctx, schoolID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, schoolID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSchool provides a mock function with given fields: ctx, group
func (_m *EducationBackend) CreateSchool(ctx context.Context, group libregraph.EducationSchool) (*libregraph.EducationSchool, error) {
	ret := _m.Called(ctx, group)

	var r0 *libregraph.EducationSchool
	if rf, ok := ret.Get(0).(func(context.Context, libregraph.EducationSchool) *libregraph.EducationSchool); ok {
		r0 = rf(ctx, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationSchool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, libregraph.EducationSchool) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSchool provides a mock function with given fields: ctx, id
func (_m *EducationBackend) DeleteSchool(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSchool provides a mock function with given fields: ctx, nameOrID, queryParam
func (_m *EducationBackend) GetSchool(ctx context.Context, nameOrID string, queryParam url.Values) (*libregraph.EducationSchool, error) {
	ret := _m.Called(ctx, nameOrID, queryParam)

	var r0 *libregraph.EducationSchool
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values) *libregraph.EducationSchool); ok {
		r0 = rf(ctx, nameOrID, queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libregraph.EducationSchool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, url.Values) error); ok {
		r1 = rf(ctx, nameOrID, queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchoolMembers provides a mock function with given fields: ctx, id
func (_m *EducationBackend) GetSchoolMembers(ctx context.Context, id string) ([]*libregraph.User, error) {
	ret := _m.Called(ctx, id)

	var r0 []*libregraph.User
	if rf, ok := ret.Get(0).(func(context.Context, string) []*libregraph.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*libregraph.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchools provides a mock function with given fields: ctx, queryParam
func (_m *EducationBackend) GetSchools(ctx context.Context, queryParam url.Values) ([]*libregraph.EducationSchool, error) {
	ret := _m.Called(ctx, queryParam)

	var r0 []*libregraph.EducationSchool
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) []*libregraph.EducationSchool); ok {
		r0 = rf(ctx, queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*libregraph.EducationSchool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, url.Values) error); ok {
		r1 = rf(ctx, queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMemberFromSchool provides a mock function with given fields: ctx, schoolID, memberID
func (_m *EducationBackend) RemoveMemberFromSchool(ctx context.Context, schoolID string, memberID string) error {
	ret := _m.Called(ctx, schoolID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, schoolID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEducationBackend interface {
	mock.TestingT
	Cleanup(func())
}

// NewEducationBackend creates a new instance of EducationBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEducationBackend(t mockConstructorTestingTNewEducationBackend) *EducationBackend {
	mock := &EducationBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
